# 기본적으로 application.properties 파일이 생성되는데 yml(야믈) 파일 훨씬 편하므로 지우고 새로 생성하도록 하자

spring:
  datasource:
    url: jdbc:h2:tcp://localhost/~/springtest
    username: sa
    password:
    driver-class-name: org.h2.Driver
    # 이런식으로 설정해주면 스프링부트가 hikariCP를 통해 connection pool까지 구성도 다 해준다.
    # hikariCP : database 연결 및 해제에는 비용이 많이 발생하므로 hikariCP가 데이터베이스와의 connection pool을 관리해준다.

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        # 콘솔에 출력하므로 로깅 시스템을 사용한다면 적용하지 말자
        # show_sql: true
        format_sql: true

logging:
  level:
    org.hibernate.SQL: debug
    # JPA를 쓰다보면 위처럼 쿼리를 출력하도록 해도 아래와 같이 쿼리 파라메터가 물음표로 나오게 된다.
    #
    # 2021-06-11 14:37:44.559 DEBUG 14986 --- [    Test worker] org.hibernate.SQL                        :
    #    insert
    #    into
    #        member
    #        (username, id)
    #    values
    #        (?, ?)
    #
    # 이렇게 쿼리 파라메터가 물음표로 나온다.

    org.hibernate.type: trace
    # 위 설정을 추가하면 아래처럼 파라메터가 별도의 로그로 출력이 된다.
    # 2021-06-11 14:51:59.014 TRACE 15647 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [aaa]
    # 2021-06-11 14:51:59.015 TRACE 15647 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [1]
    # 하지만 로그가 뭔가 만족스럽지 못하다면 외부 라이브러리를 사용해야 한다. build.gradle의 p6spy-spring-boot-starter 라이브러리 부분을 살펴보자.